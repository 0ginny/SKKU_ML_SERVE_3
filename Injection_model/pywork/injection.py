# -*- coding: utf-8 -*-
"""IP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ivo_3umb2dggIvYcfwaCfCqs3Q6AF9b6
"""

# !pip freeze >> requirments.txt

# !pip install fastapi uvicorn
# !pip install  nest-asyncio pyngrok

# from google.colab import drive
# drive.mount("/content/gdrive")
# %cd /content/gdrive/MyDrive/Colab Notebooks/skku_python_repo-main/08. 유형별로 실습하는 딥러닝

"""# 모델 불러오기"""

import pickle
import pandas as pd
import numpy as np

# 서버 관리용 fastapi 의존 라이브러리
import uvicorn

# fast api 라이브러리
from fastapi import FastAPI

# 인터페이스 데이터 관리를 위한 라이브러리
from pydantic import BaseModel

from fastapi.middleware.cors import CORSMiddleware

origins = ["*"]

app = FastAPI(title="ML API")

# CORS 미들웨어 추가
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # 모든 origin 허용
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

with open("dlmodel_240608.pickle", "rb") as fr:
    loadedRef = pickle.load(fr)

# 모델과 스케일러 정의
model = loadedRef['model']
scaler = loadedRef['scaler']


class InDataset(BaseModel):
    inResinTemp: int
    inMoldTemp: int
    inTime: float


def resin_graph_data(inResinTemp, inMoldTemp, inTime):
    # 설정할 범위 및 개수
    changeRanges = [10, 5, 0.5]
    num_values = 5

    # 각 parameter에 대한 값 생성 함수
    def generate_values(param, change_range):
        min_val = param - change_range
        max_val = param + change_range
        return np.linspace(min_val, max_val, num_values).reshape(-1, 1)

    # inResinTemp만 변경하여 데이터프레임 생성 및 예측
    resin_temps = generate_values(inResinTemp, changeRanges[0])
    InjectionData1 = pd.DataFrame(
        np.hstack([resin_temps, np.full((num_values, 1), inMoldTemp), np.full((num_values, 1), inTime)]),
        columns=['RESIN_TEMPERATURE', 'MOLD_TEMPERATURE', 'INJECTION_TIME'])
    predictions1 = model.predict(scaler.transform(np.array(InjectionData1)))

    # inMoldTemp만 변경하여 데이터프레임 생성 및 예측
    mold_temps = generate_values(inMoldTemp, changeRanges[1])
    InjectionData2 = pd.DataFrame(
        np.hstack([np.full((num_values, 1), inResinTemp), mold_temps, np.full((num_values, 1), inTime)]),
        columns=['RESIN_TEMPERATURE', 'MOLD_TEMPERATURE', 'INJECTION_TIME'])
    predictions2 = model.predict(scaler.transform(np.array(InjectionData2)))

    # inTime만 변경하여 데이터프레임 생성 및 예측
    times = generate_values(inTime, changeRanges[2])
    InjectionData3 = pd.DataFrame(
        np.hstack([np.full((num_values, 1), inResinTemp), np.full((num_values, 1), inMoldTemp), times]),
        columns=['RESIN_TEMPERATURE', 'MOLD_TEMPERATURE', 'INJECTION_TIME'])
    predictions3 = model.predict(scaler.transform(np.array(InjectionData3)))

    print("Predictions for inResinTemp changes:\n", predictions1)
    print("Predictions for inMoldTemp changes:\n", predictions2)
    print("Predictions for inTime changes:\n", predictions3)

    labels = [resin_temps.flatten().tolist(), mold_temps.flatten().tolist(), times.flatten().tolist()]
    predictions = [predictions1.flatten().tolist(), predictions2.flatten().tolist(), predictions3.flatten().tolist()]

    return labels, predictions


@app.post("/predict", status_code=200)
async def predictDl(x: InDataset):
    print(x)
    # 화면입력데이터 변수 할당
    inResinTemp = x.inResinTemp
    inMoldTemp = x.inMoldTemp
    inTime = x.inTime
    print("step1")
    # 예측을 위한 데이터셋 생성
    InjectionData = pd.DataFrame([[inResinTemp, inMoldTemp, inTime]])
    # 예측
    print(InjectionData)
    predictValue = model.predict(scaler.transform(InjectionData))[0][0]

    labels, predictions = resin_graph_data(inResinTemp, inMoldTemp, inTime)

    print("prediction : ", predictValue)
    result = {
        'Rtemp_labels': labels[0],
        'Mtemp_labels': labels[1],
        'Time_labels': labels[2],
        'Rtemp_predictions': predictions[0],
        'Mtemp_predictions': predictions[1],
        'Time_predictions': predictions[2],
        'prediction': round(float(predictValue), 2)
    }

    return result


@app.get("/")
async def root():
    return {"message": "onine"}


import uvicorn

if __name__ == "__main__":
    # IP:Injection Pressure (해석 사출압)
    uvicorn.run("injection:app", host="0.0.0.0", port=9999, log_level="debug",
                proxy_headers=True, reload=True)
